<class>
  <keyword> class </keyword>
  <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> main </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> SquareGame </identifier>
        <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> game </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> game </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> game </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> game </identifier>
          <symbol> . </symbol>
          <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> run </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> game </identifier>
          <symbol> . </symbol>
          <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> more </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> b </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier type='IdentifierType.VARIABLE' is_def='False' category='None' index='None'> b </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
