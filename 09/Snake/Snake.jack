class Snake{
    field Array x; // (x0,x1, x2, ...) array of body points
    field Array y; // (y0,y1, y2, ...) array of body points
    field Array dir; // (d0,d1, d2, ...) array of directions (1-up, 2-down, 3-left, 4-right)
    field int length;  // number of body points (segments)
    field int maxlength; // maximum length of the snake

    /** Constructs and draws a new snake from. */
    constructor Snake new(Array ax,Array ay,Array adir, int alength, int amaxlength) {
        let x = ax;
        let y = ay;
        let dir = adir;
        let length = alength;
        let maxlength = amaxlength;
        return this;
    }

    /** Disposes this snake. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Sets the snake's direction */
    method void setDir(int adirection) {
        if ((adirection > 0) & (adirection < 5)) {
            let dir[0] = adirection;
        }
        return;
    }

    method boolean selfCollision() {
        var int i;
        let i = 1; // start checking from the second segment
        while (i < length) {
            if ((x[0] = x[i]) & (y[0] = y[i])) {
                return true; //  snake has collided with itself
            }
            let i = i + 1;
        }
        return false; // game is not over
    }

    method Array getX() {
        return x;
    }

    method Array getY() {
        return y;
    }

    method Array getDir() {
        return dir;
    }     

    method int getHeadX() {
        return x[0];
    }

    method int getHeadY() {
        return y[0];
    }

    method int getHeadDir() {
        return dir[0];
    }

    method int getLength() {
        return length;
    }

    method void eat() {
        // Increases the snake's length by one segment
        var int i;
        var Array ax, ay, adir;

        if (length > (maxlength-1)) {
            return; // cannot grow beyond maximum length
        }
        // Add last element (duplicate of tail)
        let x[length] = x[length - 1];
        let y[length] = y[length - 1];
        let dir[length] = dir[length - 1];

        // Update length
        let length = length + 1;
        return;
    }

    method void move(int ahx, int ahy) {
        var int hx, hy; // head coordinates
        var int i;
        let hx = ahx;
        let hy = ahy;

        // Shift all body segments from tail to head
        let i = length - 1;
        while (i > 0) {
            let x[i] = x[i - 1];
            let y[i] = y[i - 1];
            let dir[i] = dir[i - 1];
            let i = i - 1;
        }
        // Update the head
        let x[0] = hx;
        let y[0] = hy;
        return;
    }
}