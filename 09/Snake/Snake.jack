class Snake{

    field Array x; // (x0,x1, x2, ...) array of body points
    field Array y; // (y0,y1, y2, ...) array of body points
    field Array dir; // (d0,d1, d2, ...) array of directions (1-up, 2-down, 3-left, 4-right)
    field int length;  // number of body points (segments)
    field int maxlength; // maximum length of the snake
    field int size; // random seed for the snake

    /** Constructs and draws a new snake from. */
    constructor Snake new(Array ax,Array ay,Array adir, int alength, int amaxlength, int asize) {
        let x = ax;
        let y = ay;
        let dir = adir;
        let length = alength;
        let maxlength = amaxlength;
        let size = asize;
        return this;
    }

    /** Disposes this snake. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Sets the snake's direction */
    method void setDir(int adirection) {
        if ((adirection > 0) & (adirection < 5)) {
            let dir[0] = adirection;
        }
        return;
    }

    method int getX(int index) {
        return x[index];
    }

    method int getY(int index) {
        return y[index];
    }

    method int getDir(int index) {
        return dir[index];
    }     

    method int getHeadX() {
        return x[0];
    }

    method int getHeadY() {
        return y[0];
    }

    method int getHeadDir() {
        return dir[0];
    }

    method int getLength() {
        return length;
    }

    method void eat() {
        // Increases the snake's length by one segment
        var int i;
        var Array ax, ay, adir;

        if (length > (maxlength-1)) {
            return; // cannot grow beyond maximum length
        }
        // Add last element (duplicate of tail)
        let x[length] = x[length - 1];
        let y[length] = y[length - 1];
        let dir[length] = dir[length - 1];

        // Update length
        let length = length + 1;
        return;
    }

    /** Erases the snake. */
    method void erase() {
        var int i;
        var int xh, yh; // head coordinates
        do Screen.setColor(false);     
        let i = 0;
        while (i < length) {
            do Screen.drawRectangle(size*x[i], size*y[i],size*(x[i]+1)-1, size*(y[i]+1)-1);
            let i = i + 1; // next point
        }
        return;
    }

    /** Draws all segments of the snake on the screen */
    method void draw_crash() {
        var int i;
        var int hx, hy; // head coordinates
        var int mid; // middle of the segment
        // Draws the snake head
        let hx = size*x[0];
        let hy = size*y[0];
        do Screen.setColor(false); // set color to black
        do Screen.drawLine(hx, hy, hx+size-1, hy+size-1); // draw the head
        do Screen.drawLine(hx+size-1, hy, hx, hy+size-1); // draw the head
        return;
    }
    

    method void draw() {
        var int i;
        var int hx, hy; // head coordinates
        var int tx, ty; // tail coordinates
        var int mid; // middle of the segment
        // Draws the snake positions
        do Screen.setColor(true); // set color to black
        let i = 0;
        // Each segment is a point (x, y)
        // So total array length = length * 2
        let mid = size / 2;
        while (i < length) {
            do Screen.setColor(true); 
            do Screen.drawRectangle(size*x[i], size*y[i],size*(x[i]+1)-1, (size*(y[i]+1)-1));
            if ((i>0)|(i<length-1)) {
                // Draw the segment
                do Screen.setColor(false);
                do Screen.drawPixel(size*x[i]+mid, size*y[i]+mid);
            }
            let i = i + 1; // next point
        }     

        // Draws the snake head
        let hx = size*x[0];
        let hy = size*y[0];
        do Screen.setColor(false); // set color to black
        do Screen.drawPixel(hx, hy);
        do Screen.drawPixel(hx, hy+size-1);
        do Screen.drawPixel(hx+size-1, hy);
        do Screen.drawPixel(hx+size-1, hy+size-1);
        if (dir[0]>2) {
            // direction is left or right
            do Screen.drawPixel(hx+mid, hy+mid-1);
            do Screen.drawPixel(hx+mid, hy+mid+1);
        }
        else{
            // direction is up or down
            do Screen.drawPixel(hx+mid+1, hy+mid);
            do Screen.drawPixel(hx+mid-1, hy+mid);
        }

        // Draws the snake tail
        let i = length - 1;
        let tx = size*x[i];
        let ty = size*y[i];
        // do Output.printInt(i);
        if (dir[i]=1){
            // direction is up
            do Screen.drawPixel(tx, ty+size-1);
            do Screen.drawPixel(tx+size-1, ty+size-1);
            }
        if (dir[i]=2){
                // direction is down
                do Screen.drawPixel(tx, ty);
                do Screen.drawPixel(tx+1, ty);
                do Screen.drawPixel(tx, ty+1);
                do Screen.drawPixel(tx+size-1, ty);
                do Screen.drawPixel(tx+size-2, ty);
                do Screen.drawPixel(tx+size-1, ty+1);
            }
        if (dir[i]=3){
                // direction is left
                do Screen.drawPixel(tx+size-1, ty);
                do Screen.drawPixel(tx+size-2, ty);
                do Screen.drawPixel(tx+size-1, ty+1);
                do Screen.drawPixel(tx+size-1, ty+size-1);
                do Screen.drawPixel(tx+size-1, ty+size-2);
                do Screen.drawPixel(tx+size-2, ty+size-1);
            }       
        if (dir[i]=4){
                // direction is right
                do Screen.drawPixel(tx, ty);
                do Screen.drawPixel(tx+1, ty);
                do Screen.drawPixel(tx, ty+1);
                do Screen.drawPixel(tx, ty+size-1);
                do Screen.drawPixel(tx, ty+size-2);
                do Screen.drawPixel(tx+1, ty+size-1);
        }    
        return;
    }

    method void move(int ahx, int ahy) {
        var int hx, hy; // head coordinates
        var int i;
        let hx = ahx;
        let hy = ahy;

        // Shift all body segments from tail to head
        let i = length - 1;
        while (i > 0) {
            let x[i] = x[i - 1];
            let y[i] = y[i - 1];
            let dir[i] = dir[i - 1];
            let i = i - 1;
        }
        // Update the head
        let x[0] = hx;
        let y[0] = hy;
        return;
    }
}