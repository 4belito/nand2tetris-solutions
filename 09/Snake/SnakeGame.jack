// Snake/SnakeGame.jack
/**
 * Entry point and main game loop for the Snake game.
 * Part of project 9 from the Nand2Tetris course.
 */

class SnakeGame {
   field int seed; // the seed for the random number generator
   field int level; // the level of the game
   field int delay; // the delay between snake movements
   field int initialength; // initial length of the snake
   field int maxlength;


   // Mutable variables
   field Board board; // the game board
   field Snake snake; // the snake of this game
   field Rat rat; // the rat item of this game
   field int state; // the state of the game (0 = running, 1 = win, 2 = game over)


   /** Constructs a new snake game. */
   constructor SnakeGame new(int ainitialength,int amaxlength,int aseed) {
      let seed = aseed;
      let initialength = ainitialength; // initial length of the snake
      let maxlength = amaxlength; // maximum length of the snake
      do setLevel(1); // set the initial level
      do reset(); // reset the game state
      return this;
   }

   method void setLevel(int alevel) {
      // Sets the level of the game
      let level = alevel;
      let delay = getDelay(level); // update the delay for the game
      return;
   }

   method void reset() {
      // Resets the game state keeping the last seed
      let state = 0; // game is running
      
      // Create the board snake and rat   
      let board = Board.new(512, 239, 19);
      let snake = Snake.new_default(initialength, maxlength);
      let rat = Rat.new(seed, board.width(), board.height()); // place the rat at (15, 15)
      return;
   }

   method void show(){
      do board.draw(level, snake);
      do board.show_snake(snake);
      do board.show_rat(rat);
      return;
   }


   method void runAllLevels() {
      var int key;
      let key = 0;
      while ((key = 0)&(level < 6)) { // wait for space key to start
         do printInstructions();
         while (~((key = 32) | (key = 113))){
            let key = Keyboard.keyPressed();
            if (seed > 511) {
               let seed = 0; // ensure seed is within bounds
            }else {
               let seed = seed + 1; // use the provided seed
            }
         }
         if (key = 32) { // space key
            do board.clearAll();
            do run();
            if (state = 1) { // if the game is over and the level is less than 5
               do setLevel(level + 1); // increase the level
            }
            let key = 0; // reset key
            
         }
         if (key = 113) { // q key
               return; // exit the game
         }
         do reset();
      }
      return;
   }

   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      do show(); // show the initial state of the game
      while (state = 0) {
         // waits for a key to be pressed
         while ((key = 0) & (state = 0)){
               let key = Keyboard.keyPressed();
               do move_snake(); // move the snake
         }

         if (key = 113) { let state = 3;}     // q key
         if (key = 131) { do snake.setDir(board.dirUP()); }     // up arrow
         if (key = 133) { do snake.setDir(board.dirDOWN()); }   // down arrow
         if (key = 130) { do snake.setDir(board.dirLEFT()); }   // left arrow
         if (key = 132) { do snake.setDir(board.dirRIGHT()); }  // right arrow

         // waits for the key to be released
         while ((~(key = 0)) & (state = 0)) {
               let key = Keyboard.keyPressed();
               do move_snake(); // move the snake
         }
         if (snake.getLength() = snake.getMaxLength()) {let state = 1;}
            // redraw the rat
      } 
      if (state = 2) {do print_lose();}
      if (state = 1) {do print_win();}
      do Sys.wait(2000); // wait for 2 second before exiting
      return;
   }

   method void print_lose() {
      // Prints the lose message
      do board.show_snake_crash(snake);
      do Output.moveCursor(10,27);
      do Output.printString("Game Over");
      return;
   }

   method void print_win() {
      // Prints the win message
      do Output.moveCursor(10,27);
      do Output.printString("You Win!");
      return;
   }

   method int getState() {
      return state;
   }   

   method int getDelay(int alevel) {
      // Returns the delay for the game
      if (alevel = 1) {return 100;} // easy
      if (alevel = 2) {return 80;} // medium
      if (alevel = 3) {return 60;} // hard
      if (alevel = 4) {return 40;} // very hard
      if (alevel = 5) {return 20;} // extreme
      return null; // invalid level
   }

   /** Print initial game instructions. */
   method void printInstructions() {
      do Screen.clearScreen();
      do Output.moveCursor(9, 20);
      do Output.printString("===  SNAKE  GAME  ===");
      do Output.moveCursor(12, 21);
      do Output.printString("press space to start");
      do Output.moveCursor(13, 23);
      do Output.printString("press q to quit");
      do Output.moveCursor(22, 42);
      do Output.printString(" by Abel Diaz-Gonzalez ");
      return;
   }

   method void move_snake() {
      // Moves the snake according to its direction
      var int dir,x,y,hx,hy; // head coordinates
      let dir = snake.getHeadDir();
      let x = snake.getHeadX();
      let y = snake.getHeadY();
      if (dir = board.dirUP())    { let hx = x;     let hy = y - 1; } // up
      if (dir = board.dirDOWN())  { let hx = x;     let hy = y + 1; } // down
      if (dir = board.dirLEFT())  { let hx = x - 1; let hy = y;     } // left
      if (dir = board.dirRIGHT()) { let hx = x + 1; let hy = y;     } // right
      // check if the new head position is within bounds
      if ((hx < 0) | (hx = board.width()) | (hy < 0) | (hy = board.height()) | snake.selfCollision()) {
         let state = 2;
         return; // out of bounds, do not move
      }
      do board.hide_snake(snake);
      do snake.move(hx, hy);
      do board.search_rat(snake, rat); // check if the snake has eaten the rat
      do board.show_snake(snake); // redraw the snake
      do Sys.wait(delay);
      return;
   }
   method void dispose() {
      do snake.dispose();
      do rat.dispose();
      do board.dispose();
      do Memory.deAlloc(this);
      return;
   }
}
